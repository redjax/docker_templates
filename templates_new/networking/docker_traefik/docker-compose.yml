version: '3.7'

networks:
  spooki_proxy:
    external:
      name: spooki_proxy
  default:
    driver: bridge

services:
  
  traefik:
    image: traefik:${TRAEFIK_IMG_VERSION:-latest}
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: ${TRAEFIK_WEBUI_PORT:-8080}
        protocol: tcp
        mode: host
    volumes:
      - ${TRAEFIK_RULES_DIR:-./config/rules}:/config/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${TRAEFIK_ACME_FILE:-./acme.json}:/acme.json
      - ${TRAEFIK_LOG_FILE:-./logs/access.log}:/logs/access.log
      - ./config/.htpasswd:/config/.htpasswd
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    networks:
      - spooki_proxy
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set X-Forwarded-* headers in Cloudflare
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.insecure=${TRAEFIK_API_INSECURE:-false}
      - --serversTransport.insecureSkipVerify=${TRAEFIK_SKIP_VERIFY:-false}
      - --log=true
      - --log.level=${TRAEFIK_LOG_LEVEL:-ERROR}
      - --accessLog=true
      - --accessLog.filePath=${TRAEFIK_LOG_FILE:-./logs/access.log}
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAINNAME}`)
      - --providers.docker.exposedByDefault=${TRAEFIK_DEFAULT_EXPOSE:-false}
      - --providers.docker.network=spooki_proxy
      - --providers.docker.swarmMode=${TRAEFIK_SWARM_MODE:-false}
      # Load dynamic config from 1+ .toml/yml files in a directory
      - --providers.file.directory=/config/rules
      # Load a dynamic config from a specific file
      # - --providers.file.filename=/path/to/conf/file
      # Only works at top level in rules folder
      - --providers.file.watch=${TRAEFIK_FILE_WATCH:-true}
      # LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=./acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    labels:
      - "traefik.enable=true"
        # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" 
